#!/bin/bash

########################################################################################
#
#    Copyright 2017 by Christian Felsing <support@felsing.net>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as published by
#    the Free Software Foundation, either version 2 of the License, or
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
########################################################################################
########################################################################################
#     #     #     ######   #     #  ###  #     #   #####   
#  #  #    # #    #     #  ##    #   #   ##    #  #     #  
#  #  #   #   #   #     #  # #   #   #   # #   #  #        
#  #  #  #     #  ######   #  #  #   #   #  #  #  #  ####  
#  #  #  #######  #   #    #   # #   #   #   # #  #     #  
#  #  #  #     #  #    #   #    ##   #   #    ##  #     #  
 ## ##   #     #  #     #  #     #  ###  #     #   #####   

# THIS SCRIPT WILL DESTROY EXISTING EJBCA INSTALLATION
# YOU HAVE BEEN WARNED
########################################################################################


########################################################################################
# Configurables

ejbca_user=$(whoami)
ejbca_group=$(id -g -n $ejbca_user)
ejbca_home=~

httpsserver_hostname="ejbca.example.com"
database_host="mysql"
database_name="ejbca"
database_url="jdbc:mysql://${database_host}:3306/${database_name}?characterEncoding=UTF-8"
database_driver="org.mariadb.jdbc.Driver"
database_username="ejbca"
database_password="very***bad***database***password"
superadmin_cn="SuperAdmin"
ca_name="ManagementCA"
BASE_DN="O=Example CA,C=DE"
ca_dn="CN=ManagementCA,${BASE_DN}"

WILDFLY_VERSION="10.1.0.Final"
EJBCA_VERSION="6_5.0.5"
MARIADB_CONNECTOR_VERSION="1.5.8"

EJBCA_DOWNLOAD_URL="https://downloads.sourceforge.net/project/ejbca/ejbca6/ejbca_6_5_0/ejbca_ce_${EJBCA_VERSION}.zip"
EJBCA_DOWNLOAD_SHA256_URL="https://downloads.sourceforge.net/project/ejbca/ejbca6/ejbca_6_5_0/ejbca_ce_${EJBCA_VERSION}.zip.SHA-256"
MARIADB_DOWNLOAD_URL="https://downloads.mariadb.com/Connectors/java/connector-java-${MARIADB_CONNECTOR_VERSION}/mariadb-java-client-${MARIADB_CONNECTOR_VERSION}.jar"
MARIADB_DOWNLOAD_SHA256_URL="https://downloads.mariadb.com/Connectors/java/connector-java-${MARIADB_CONNECTOR_VERSION}/sha256sums.txt"

scep_ra_keyStorePassword_1="geheim"
scep_ra_datasource_password="ejbca"

########################################################################################


pwgen() {
  NEW_PASSWORD=$(dd if=/dev/urandom bs=1 count=64 2> /dev/null | sha512sum | awk '{print $1}' | tr -d "\n")
  if [ -z "$NEW_PASSWORD" ]; then
    echo "Created empty password - very bad"
    exit 1
  fi
  echo -n "${NEW_PASSWORD}"
}

keystorepass=$(pwgen)
truststorepass=$(pwgen)
httpsserver_password=$(pwgen)

WILDFLY_TAR="wildfly-${WILDFLY_VERSION}.tar.gz"
WILDFLY_DIR="wildfly-${WILDFLY_VERSION}"


init_mysql() {
  mysql_user=$(grep database.username ejbca-custom/conf/database.properties | awk -F= '{ print $2 }' | grep -v '^$')
  mysql_pass=$(grep database.password ejbca-custom/conf/database.properties | awk -F= '{ print $2 }' | grep -v '^$')
  mysql_host=$(grep database.url ejbca-custom/conf/database.properties | awk -F/ '{print $3}' | awk -F: '{print $1}' | grep -v '^$')
  echo 'drop database ejbca;' | mysql --user=$mysql_user --password=$mysql_pass --host=${mysql_host} ejbca
 echo 'create database ejbca default character set = utf8 default collate = utf8_general_ci;' | mysql --user=$mysql_user --password=$mysql_pass --host=${mysql_host} || exit 1
}


create_mysql_index() {
  cd ~ || exit 1
  cat ejbca/doc/sql-scripts/create-index-ejbca.sql | mysql --host=${database_host} --user=${database_username} --password=${database_password} ${database_name}
}


wildfly_killall() {
  pidof java > /dev/null 2> /dev/null
  if [ $? -eq 0 ]; then
    killall -9 java
    sleep 10
  fi
}


wildfly_exec() {
  wildfly/bin/jboss-cli.sh --connect "$1"
}


wildfly_shutdown() {
  cd ~ || exit 1
  wildfly/bin/jboss-cli.sh --connect command=:shutdown
}


wildfly_reload() {
  cd ~ || exit 1
  wildfly/bin/jboss-cli.sh --connect command=:reload
}


wildfly_check() {
  DURATION_SECONDS=30
  if [ ! -z "$1" ]; then
    DURATION_SECONDS="$1"
  fi
  DURATION=$(echo "$DURATION_SECONDS / 5" | bc)

  echo "wait ${DURATION_SECONDS}s for start up wildfly"
  cd ~ || exit 1
  for i in `seq 1 $DURATION`; do
    wildfly/bin/jboss-cli.sh --connect ":read-attribute(name=server-state)" | grep "result" | awk '{ print $3; }'|grep running
    if [ $? -eq 0 ]; then
      return 0
    fi
    sleep 5
  done
  echo "wildfly not started after ${DURATION_SECONDS}s, exit"
  exit 1
}


ejbca_deploy_check() {
  cd ~
  DURATION_SECONDS=30
  if [ ! -z "$1" ]; then
    DURATION_SECONDS="$1"
  fi
  DURATION=$(echo "$DURATION_SECONDS / 5" | bc)

  echo "wait ${DURATION_SECONDS}s for deploying EJBCA"
  cd ~ || exit 1
  for i in `seq 1 $DURATION`; do
    tail -50 wildfly/standalone/log/server.log |grep 'Deployed "ejbca.ear"' > /dev/null 2> /dev/null
    if [ $? -eq 0 ]; then
      echo "EJBCA deployed"
      return 0
    fi
    sleep 5
  done
  echo "EJBCA not deployed after ${DURATION_SECONDS}s, exit"
  exit 1
}


wildfly_register_database() {
  wildfly/bin/jboss-cli.sh --connect "/subsystem=datasources/jdbc-driver=org.mariadb.jdbc.Driver:add(driver-name=org.mariadb.jdbc.Driver,driver-module-name=org.mariadb,driver-xa-datasource-class-name=org.mariadb.jdbc.MariaDbDataSource)"
  wildfly_reload
}


wildfly_enable_ajp() {
  wildfly/bin/jboss-cli.sh --connect "/subsystem=undertow/server=default-server/ajp-listener=ajp-listener:add(socket-binding=ajp, scheme=https, enabled=true)"
}


wildfly_setup_https() {
  cd ~ || exit 1

  wildfly_server_config_dir="wildfly/standalone/configuration"
  keystore_password=$(grep '^httpsserver.password' ejbca-custom/conf/web.properties | awk -F= '{ print $2 }' | grep -v '^$')
  truststore_pass=$(grep '^java.trustpassword' ejbca-custom/conf/web.properties | awk -F= '{ print $2 }' | grep -v '^$')
  web_hostname=$(grep '^httpsserver.hostname' ejbca-custom/conf/web.properties | awk -F= '{ print $2 }' | grep -v '^$')

  wildfly_exec "/interface=http:add(inet-address=\"0.0.0.0\")"
  wildfly_exec "/interface=httpspub:add(inet-address=\"0.0.0.0\")"
  wildfly_exec "/interface=httpspriv:add(inet-address=\"0.0.0.0\")"
  wildfly_exec "/socket-binding-group=standard-sockets/socket-binding=http:add(port="8080",interface=\"http\")"
  wildfly_exec "/subsystem=undertow/server=default-server/http-listener=http:add(socket-binding=http)"
  wildfly_exec "/subsystem=undertow/server=default-server/http-listener=http:write-attribute(name=redirect-socket, value=\"httpspriv\")"
  wildfly_exec ":reload"
  
  wildfly_check
  
  wildfly_exec "/core-service=management/security-realm=SSLRealm:add()"
  wildfly_exec "/core-service=management/security-realm=SSLRealm/server-identity=ssl:add(keystore-path=\"${wildfly_server_config_dir}/keystore/keystore.jks\", keystore-password=\"${keystore_password}\", alias=\"${web_hostname}\")"
  wildfly_exec "/core-service=management/security-realm=SSLRealm/authentication=truststore:add(keystore-path=\"${wildfly_server_config_dir}/keystore/truststore.jks\", keystore-password=\"${truststore_pass}\")"
  wildfly_exec "/socket-binding-group=standard-sockets/socket-binding=httpspriv:add(port="8443",interface=\"httpspriv\")"
  wildfly_exec "/socket-binding-group=standard-sockets/socket-binding=httpspub:add(port="8442", interface=\"httpspub\")"

  wildfly_exec ":shutdown"
  nohup wildfly/bin/standalone.sh -b 0.0.0.0 > /dev/null 2> /dev/null &
  wildfly_check 240

  wildfly_exec "/subsystem=undertow/server=default-server/https-listener=httpspriv:add(socket-binding=httpspriv, security-realm=\"SSLRealm\", verify-client=REQUIRED)"
  wildfly_exec "/subsystem=undertow/server=default-server/https-listener=httpspub:add(socket-binding=httpspub, security-realm=\"SSLRealm\")"
  wildfly_exec ":reload"
  wildfly_check 30

  wildfly_exec "/system-property=org.apache.tomcat.util.buf.UDecoder.ALLOW_ENCODED_SLASH:add(value=true)"
  wildfly_exec "/system-property=org.apache.catalina.connector.CoyoteAdapter.ALLOW_BACKSLASH:add(value=true)"
  wildfly_exec "/system-property=org.apache.catalina.connector.URI_ENCODING:add(value=\"UTF-8\")"
  wildfly_exec "/system-property=org.apache.catalina.connector.USE_BODY_ENCODING_FOR_QUERY_STRING:add(value=true)"
  wildfly_exec "/subsystem=webservices:write-attribute(name=wsdl-host, value=jbossws.undefined.host)"
  wildfly_exec "/subsystem=webservices:write-attribute(name=modify-wsdl-address, value=true)"
  wildfly_exec ":reload"
  wildfly_check 30
}


wildfly_setup_logging() {
  wildfly_exec "/subsystem=logging/logger=org.ejbca:write-attribute(name=level, value=DEBUG)"
  wildfly_exec "/subsystem=logging/logger=org.cesecore:write-attribute(name=level, value=DEBUG)"
  wildfly_exec ":reload"
  wildfly_check 30
}


ejbca_installer() {
  cd ~
  rm -f /tmp/run_as_root.sh

  wildfly_killall

  create_config_files

  init_mysql

  if [ ! -d Download ]; then
    mkdir Download
  fi
  
  if [ ! -f Download/${WILDFLY_TAR} ]; then
    curl -o Download/${WILDFLY_TAR} -L http://download.jboss.org/wildfly/${WILDFLY_VERSION}/${WILDFLY_TAR}
  fi
  
  if [ ! -f Download/mariadb-java-client-${MARIADB_CONNECTOR_VERSION}.jar ]; then
    cd Download
    curl -o mariadb-java-client-${MARIADB_CONNECTOR_VERSION}.jar -L ${MARIADB_DOWNLOAD_URL}
    curl -o mariadb-java-client-${MARIADB_CONNECTOR_VERSION}.sha256 -L ${MARIADB_DOWNLOAD_SHA256_URL}
    sha256sum --check mariadb-java-client-${MARIADB_CONNECTOR_VERSION}.sha256 2>&1| grep mariadb-java-client-${MARIADB_CONNECTOR_VERSION}.jar
    if [ $? -ne 0 ]; then
       echo "SHA256 for mariadb-java-client does not match"
       exit 1
    fi
    cd ..
  fi
  
  if [ ! -f Download/ejbca_ce_${EJBCA_VERSION}.zip ]; then
    cd Download
    curl -o ejbca_ce_${EJBCA_VERSION}.zip -L "${EJBCA_DOWNLOAD_URL}"
    curl -o ejbca_ce_${EJBCA_VERSION}.zip.SHA256 -L "${EJBCA_DOWNLOAD_SHA256_URL}"
    sha256sum --check ejbca_ce_6_5.0.5.zip.SHA256
    if [ $? -ne 0 ]; then
       echo "SHA256 for EJBCA does not match"
       exit 1
    fi
    cd ..
  fi
  
  rm -rf "${WILDFLY_DIR}" > /dev/null 2> /dev/null
  rm -rf "ejbca_ce_${EJBCA_VERSION}" > /dev/null 2> /dev/null
  
  tar xvf Download/${WILDFLY_TAR}
  if [ -h wildfly ]; then
    rm -f wildfly
  fi
  ln -s "${WILDFLY_DIR}" wildfly
  
  cp "Download/mariadb-java-client-${MARIADB_CONNECTOR_VERSION}.jar" "wildfly/standalone/deployments/mariadb-java-client.jar" || exit 1
  
  # patch standalone.conf
  cd ~/wildfly/bin || exit 1
  sed -i.bak 's/JAVA_OPTS="-Xms64m -Xmx512m -XX:MaxPermSize=256m -Djava.net.preferIPv4Stack=true"/JAVA_OPTS="-Xms2048m -Xmx2048m -XX:MaxPermSize=384m -Djava.net.preferIPv4Stack=true"/g' standalone.conf
  cd ~
  
  nohup wildfly/bin/standalone.sh -b 0.0.0.0 > /dev/null 2> /dev/null &
  sleep 3
  wildfly_check || exit 1
  #wildfly_register_database || exit 1
  wildfly_enable_ajp || exit 1
  wildfly_reload || exit 1
  wildfly_check || exit 1
  
  # Add datasource
  wildfly_exec "data-source add --name=ejbcads --driver-name=\"mariadb-java-client.jar\" --connection-url=\"jdbc:mysql://${mysql_host}:3306/ejbca\" --jndi-name=\"java:/EjbcaDS\" --use-ccm=true --driver-class=\"org.mariadb.jdbc.Driver\" --user-name=\"${mysql_user}\" --password=\"${mysql_pass}\" --validate-on-match=true --background-validation=false --prepared-statements-cache-size=50 --share-prepared-statements=true --min-pool-size=5 --max-pool-size=150 --pool-prefill=true --transaction-isolation=TRANSACTION_READ_COMMITTED --check-valid-connection-sql=\"select 1;\""
  wildfly_exec ":reload"
  
  # Configure WildFly Remoting
  wildfly_exec "/subsystem=remoting/http-connector=http-remoting-connector:remove"
  wildfly_exec "/subsystem=remoting/http-connector=http-remoting-connector:add(connector-ref=\"remoting\",security-realm=\"ApplicationRealm\")"
  wildfly_exec "/socket-binding-group=standard-sockets/socket-binding=remoting:add(port=\"4447\")"
  wildfly_exec "/subsystem=undertow/server=default-server/http-listener=remoting:add(socket-binding=remoting)"
  wildfly_exec ":reload"
  
  # Configure logging
  wildfly_exec "/subsystem=logging/logger=org.ejbca:add"
  wildfly_exec "/subsystem=logging/logger=org.ejbca:write-attribute(name=level, value=DEBUG)"
  wildfly_exec "/subsystem=logging/logger=org.cesecore:add"
  wildfly_exec "/subsystem=logging/logger=org.cesecore:write-attribute(name=level, value=DEBUG)"
  
  # Remove existing TLS and HTTP configuration
  wildfly_exec "/subsystem=undertow/server=default-server/http-listener=default:remove"
  wildfly_exec "/subsystem=undertow/server=default-server/https-listener=https:remove"
  wildfly_exec "/socket-binding-group=standard-sockets/socket-binding=http:remove"
  wildfly_exec "/socket-binding-group=standard-sockets/socket-binding=https:remove"
  wildfly_exec ":reload"
  
  unzip Download/ejbca_ce_${EJBCA_VERSION}.zip || exit 1
  if [ -h ejbca ]; then
    rm -f ejbca
  fi
  ln -s ejbca_ce_${EJBCA_VERSION} ejbca

  echo "deploying EJBCA"
  cd ejbca || exit 1
  ant clean deployear
  
  ejbca_deploy_check 240
  cd ejbca || exit 1
  echo "starting EJBCA initialization"
  ant runinstall

  echo "deploy keystore"
  cd ~
  wildfly_check || exit 1
  cd ejbca || exit 1
  ant deploy-keystore
  
  cp -a p12 ../ejbca-custom/

  cd ~ || exit 1
  #wildfly_exec ":shutdown"
  #nohup wildfly/bin/standalone.sh -b 0.0.0.0 > /dev/null 2> /dev/null &
  #wildfly_check 240

  echo "creating SQL index"
  create_mysql_index

  echo "set up Wildfly https connectors"
  wildfly_setup_https

  echo "set up Wildfly logging"
  wildfly_setup_logging

  echo "*********************************************************************"
  echo "* SUCCESS                                                           *"
  echo "*********************************************************************"
}


are_you_sure() {
  echo "LAST CHANCE TO STOP THIS"
  echo "Do you really want to destroy your EJBCA installation?"
  select yn in "Yes" "No"; do
    case $yn in
        Yes ) ejbca_installer; break;;
        No ) exit;;
    esac
  done
}


init_installer() {
  echo "This will destroy your complete EJBCA installation"
  echo "Do you want this?"
  select yn in "Yes" "No"; do
      case $yn in
          Yes ) are_you_sure; break;;
          No ) exit;;
      esac
  done
}


create_config_files() {
mkdir -p ejbca-custom/conf || exit 1

cat <<EOF > ejbca-custom/conf/batchtool.properties
# Property file used to configure the batch tool for generating
# keystores. This file should be in either current directory or conf/ 
# subdirectory or in your home directory if personlized settings is 
# required. If no property file is found,default values will be used.

# Indicates which type of keys should be generated by the batch tool
# Examples: RSA, ECDSA or DSA
#
# Default: RSA
keys.alg=RSA

# Indicates which key size of the RSA or DSA keys that should be used, or curve if ECDSA.
# Examples: 1024 for RSA or DSA and prime256v1 for ECDSA
#
# Default: 2048
keys.spec=4096
EOF

cat <<EOF > ejbca-custom/conf/certstore.properties
# ------------ RFC 4387 Certificate store configuration ---------------------
# These configurations are used both for EJBCA and the Validation Authority (VA).

# Certificate store servlet enabled. If false there will be no servlet.
# Default is false.
certstore.enabled=true

# Context root (the path in the URL)
# Default is '/certificates'
certstore.contextroot=/ejbca/publicweb/certificates
EOF

cat <<EOF > ejbca-custom/conf/cesecore.properties
# Set to true to allow dynamic re-configuration using properties files in the file 
# system. Using this you can place a file /etc/cesecore/conf/cesecore.properties in the file system and
# override default values compiled into ejbca.ear.
#
# Default: false
#allow.external-dynamic.configuration=false

# ------------ Basic CA configuration ---------------------
# When upgrading, the important options are:
# - ca.keystorepass
# - ca.xkmskeystorepass (in ejbca.properties)
# - ca.cmskeystorepass (in ejbca.properties)

# This password is used internally to protect CA keystores in database (i.e. the CAs private key).
# foo123 is to keep compatibility with default installations of EJBCA 3.0, please change this if possible
# Note! If changing this value AFTER installation of EJBCA you must do 'ant clean; ant bootstrap' in order to activate changes.
ca.keystorepass=${keystorepass}

# Default Random Number Generator algorithm for certificate serial number generation.
# Available algorithms are:
# SHA1PRNG
ca.rngalgorithm=SHA1PRNG

# The length in octets of certificate serial numbers generated. 8 octets is a 64 bit serial number.
# It is really recommended to use at least 64 bits, so please leave as default unless you are really sure, 
# and have a really good reason to change it.
# Possible values: between 4 and 20
# Default: 8
#ca.serialnumberoctetsize=8

# The date and time from which an expire date of a certificate is to be considered to be too far in the future.
# The time could be specified in two ways:
# 1. The unix time see http://en.wikipedia.org/wiki/Unix_time given as an integer decoded to an hexadecimal string.
#    The value 80000000 will give the time when the integer becomes negative if casted to 32 bit.
#    This is when the year 2038 problem occurs. See http://en.wikipedia.org/wiki/Year_2038_problem .
#    Set to this value if you don't want to issue any certificates that could cause this problem.
# 2. For you convenience this could also be specified in the ISO8601 date format.
# Default: no limitation
# The 2038 problem:
#ca.toolateexpiredate=80000000
#ca.toolateexpiredate=2038-01-19 03:14:08+00:00


# The idea of a HSM to use a HSM is to have the private keys protected. It should not be possible to extract them.
# To prevent using a key with the private part extractable a test is made before activating a CA.
# If this test shows that you can read the private part from the key the CA will not be activated unless the key is a SW key.
# You may (but should not) permit using extractable private keys by setting this property to 'true'.
# Default: false
#ca.doPermitExtractablePrivateKeys=true

# Forbidden characters in DB.
# When one of these characters is found in any string that should be stored in
# the DB it will be replaced by a forward slash (/). Same replacement will also
# be done when searching for strings in the DB.
# Example of strings affected by this:
# * user names
# * issuer and subject DN of certificates.
# * profile names
# It will also be impossible to use any of these characters in any field of a
# certificate (like issuer or subject DN).
# It is strongly discouraged to change this property. Instead set it to the
# desired value before you install EJBCA.
# If you change these characters later it might be that some search for a string
# that include one of the characters that have been changed will fail. This could
# result in that some important functionality stops working. Examples what could
# fail is:
# * An administrator user can not be used any more.
# * A certificate can not be found.
# * A certificate can not be issued since the used profile can not be found.
# The default are these characters: '\\n', '\\r', ';', '!', '\\0', '%', '\`', '?', '$', '~'.
# The property value is a string with all forbidden characters concatenated
# (without any space). Note that '\\' is an escape character.
# This will be the same as not defining the property:
#forbidden.characters = \\n\\r;!\\u0000%\`?$~
# And nothing forbidden will be:
#forbidden.characters  =

# ------------- Core language configuration -------------
# The language that should be used internally for logging, exceptions and approval notifications.
# The languagefile is stored in 'src/intresources/ejbcaresources.xx.properties' and 'intresources.xx.properties'.
# Should be one of: en, fr, ja, pt, sv.
# Default: en
intresources.preferredlanguage=en

# The language used internally if a resource not found in the preferred language.
# Default: sv
intresources.secondarylanguage=en

# ------------ Audit log configuration ---------------------
# I you want to use integrity protection of the audit log (in the IntegrityProtectedDevice) you
# must also configure integrity protection in conf/databaseprotection.properties
# 

#### Secure audit log configuration.

# All security log events are written to all enabled/configured devices.
# The following AuditLogDevice implementations are available:
#securityeventsaudit.implementation.X=org.cesecore.audit.impl.log4j.Log4jDevice
#securityeventsaudit.implementation.X=org.cesecore.audit.impl.integrityprotected.IntegrityProtectedDevice

# Default is to use the Log4jDevice and the IntegrityProtectedDevice (without integrity protection enabled),
# To de-configure these devices, set their implementation to "null" value (don't forget to comment out default section below).
# i.e.
#securityeventsaudit.implementation.0=null
#securityeventsaudit.implementation.1=null

# Each device can have a different exporter.
# The following AuditExporter implementations are available:
#securityeventsaudit.exporter.X=org.cesecore.audit.impl.AuditExporterDummy (default)
#securityeventsaudit.exporter.X=org.cesecore.audit.impl.AuditExportCsv
#securityeventsaudit.exporter.X=org.cesecore.audit.impl.AuditExporterXml

# Device implementation specific parameters (e.g. "key.subkey=value") can be passed by using 
#securityeventsaudit.deviceproperty.X.key.subkey=value

# Example configuration of Log4jDevice that logs to log4j server log file.
# The Log4jDevice does not support query, validation or export operations
securityeventsaudit.implementation.0=org.cesecore.audit.impl.log4j.Log4jDevice

# Example configuration of IntegrityProtectedDevice that logs to the database
# With XML export to /tmp/ (default export dir)
# On windows a path would be for example 'C:/Temp/'
securityeventsaudit.implementation.1=org.cesecore.audit.impl.integrityprotected.IntegrityProtectedDevice
securityeventsaudit.exporter.1=org.cesecore.audit.impl.AuditExporterXml
#securityeventsaudit.deviceproperty.1.export.dir=/tmp/
#securityeventsaudit.deviceproperty.1.export.fetchsize=1000
#securityeventsaudit.deviceproperty.1.validate.fetchsize=1000

# Nodeid used for integrity protected audit log. If not set the hostname of local host is used.
# Default: not set
#cluster.nodeid=

# When upgrading a 100% up-time cluster, all nodes should be deployed with db.keepjbossserialization=true.
# For upgrades from EJBCA version 4.0 to later versions.
# Once all nodes are running > 4.0, set to false to increase efficiency and portability.
# Default: false
#db.keepjbossserialization=true

# Option if we should keep internal CA keystores in the CAData table to be compatible with CeSecore 1.1/EJBCA 5.0.
# Default to true. Set to false when all nodes in a cluster have been upgraded to CeSecore 1.2/EJBCA 5.1 or later,
# then internal keystore in CAData will be replaced with a foreign key in to the migrated entry in CryptotokenData.
#
# When upgrading a 100% up-time cluster, all nodes should initially be deployed with db.keepinternalcakeystores=true.
# Once all nodes are running > EJBCA 5.0, set to false again to increase efficiency and portability.
# For upgrades from EJBCA version 5.0 to later versions.
# Default: true
#db.keepinternalcakeystores=true

# When upgrading a 100% up-time cluster, all nodes should be deployed with ca.keepocspextendedservice=true.
# Once all nodes are running > 6.0, set to true to increase efficiency and portability.
# Default: false
#ca.keepocspextendedservice=true

# When generating large CRLs, the RAM of the Java process will limit how many entries that can be
# fetched from the database at the time. A small value will lead to multiple round-trips to the
# database and CRL generation will take more time.
#
# The heap usage can be estimated to roughly 600 bytes * rows per database read. The default of
# 0.5M revoked entries per database round trip will usually fit within a 2GiB heap assigned to the
# application server. If multiple large CRLs are generated at the same time, the used heap will be
# the sum of the heap used by each CRL generation.
#
# If you have plenty of RAM assigned to the application server you should increase this value.
# Default: 500000
#database.crlgenfetchsize=500000

#------------------- ECDSA implicitlyCA settings -------------
# Sets pre-defined EC curve parameters for the implicitlyCA facility.
# See the User's Guide for more information about the implicitlyCA facility.
# Setting these parameters are not necessary when using regular named curves. 
# if you don't know what this means, you can safely ignore these settings.
#
# Default values that you can experiment with:
# ecdsa.implicitlyca.q=883423532389192164791648750360308885314476597252960362792450860609699839
# ecdsa.implicitlyca.a=7fffffffffffffffffffffff7fffffffffff8000000000007ffffffffffc
# ecdsa.implicitlyca.b=6b016c3bdcf18941d0d654921475ca71a9db2fb27d1d37796185c2942c0a
# ecdsa.implicitlyca.g=020ffa963cdca8816ccc33b8642bedf905c3d358573d3f27fbbd3b3cb9aaaf
# ecdsa.implicitlyca.n=883423532389192164791648750360308884807550341691627752275345424702807307

#------------------- PKCS#11 -------------------------------------
# Configuration of PKCS#11 tokens.
#
# Disabling of sign mechanisms that are using PKCS#11 to hash the data before signing.
# If these mechanisms are disabled then the sun PKCS#11 wrapper will do the hashing
# before PKCS#11 is called.
# Default: true (the mechanisms are disabled).
#pkcs11.disableHashingSignMechanisms=false

# Caching the references to PKCS#11 objects can make a big performance difference.
# Default: true
#cryptotoken.keystorecache=true

# ------------------- Authentication Key Binding settings -------------------
# Configuration of available cipher suites for outgoing SSL/TLS connections
# that can be selected for an Authentication Key Binding.
# 
# Java 6: http://docs.oracle.com/javase/6/docs/technotes/guides/security/SunProviders.html#SunJSSEProvider
#   TLS versions: SSLv3, TLSv1, SSLv2Hello
# Java 7: http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html#SunJSSEProvider
#   TLS versions: SSLv3, TLSv1, SSLv2Hello, TLSv1.1, TLSv1.2
#   Cipher suites with SHA384 and SHA256 are available only for TLS 1.2 or later.
#
# The configuration format is "<TLS version>;cipher" and the follow ciphers are defined by default
# and can be undefined by setting the properties to "undefined".
#authkeybind.ciphersuite.0=TLSv1.2;TLS_DHE_RSA_WITH_AES_256_CBC_SHA256
#authkeybind.ciphersuite.1=TLSv1.2;TLS_RSA_WITH_AES_256_CBC_SHA256
#authkeybind.ciphersuite.2=TLSv1.2;TLS_RSA_WITH_AES_128_CBC_SHA
#authkeybind.ciphersuite.3=TLSv1;TLS_DHE_RSA_WITH_AES_256_CBC_SHA
#authkeybind.ciphersuite.4=TLSv1;TLS_RSA_WITH_AES_256_CBC_SHA
#authkeybind.ciphersuite.5=TLSv1;TLS_RSA_WITH_AES_128_CBC_SHA


# ------------------- Certificate Transparency settings -------------------
# If your EJBCA has support for CT in it, you may configure caching of SCTs
# here. The cache is only used when using CT in OCSP responses (and not in
# the CT publisher or when using CT in new certificates).
#
# Enables or disables the cache.
# Default: true (caching enabled)
#ct.cache.enabled=false
#
# Maximum number of OCSP response extensions to cache, or -1 for no limit.
# You may need to adjust java heap parameters if you adjust this.
# Default: 100000
#ct.cache.maxentries=1000000
#
# Maximum frequency in milliseconds of clean ups when the cache is over its
# limit. During a clean up, cache entries are randomly queued for removal
# at the next clean up if they aren't used.
# Default: 10000 (10 seconds)
#ct.cache.cleanupinterval=60000
#
# Whether log availability should be tracked, and requests should "fast fail"
# whenever a log is known to be down. A log is "known to be down" when it
# is either unreachable or responds with an HTTP error status to a request.
# NOTE: Since a single error will cause ALL subsequent requests that are not
# cached to "fast fail" until the backoff time is over, make sure to:
#   1. Disallow CAs that are not trusted by the CT logs in CT-enabled
#      certificate profiles. If a log server receives a request for a
#      certificate from an untrusted CA, it will return an error, and trigger
#      "fail fail" for other certificates.
#   2. Make sure the certificate profiles are restrictive and do not allow
#      uncommon certificate fields etc., that could cause a parse error
#      in the CT log, which would also trigger fast fail.
# Default: false (fast fail disabled)
#ct.fastfail.enabled=true
#
# How long time (in milliseconds) EJBCA should wait until trying to use a log
# which has failed to respond to a request.
# Default: 1000 (1 second)
#ct.fastfail.backoff=60000
EOF


cat <<EOF > ejbca-custom/conf/crlstore.properties
# ------------ RFC 4387 CRL store configuration ---------------------
# These configurations are used both for EJBCA and the Validation Authority (VA).

# CRL store servlet enabled. If false there will be no servlet.
# Default is false.
crlstore.enabled=true

# Context root (the path in the URL)
# Default is '/crls'
crlstore.contextroot=/ejbca/publicweb/crls
EOF


cat <<EOF > ejbca-custom/conf/database.properties
# ------------- Database configuration ------------------------

# The default values in this file is good for a default install, using the build in H2 test database, with JBoss 7/EAP 6.
# For a default install with Hypersonic database on JBoss 5, change database.name, database.url, database.driver and database.password.

# JNDI name of the DataSource used for EJBCA's database access. The prefix
# (e.g. 'java:/', '' or 'jdbc/')is automatically determined for each
# application server.
# default: EjbcaDS
#datasource.jndi-name=EjbcaDS

# The database name selected for deployment, used to copy XDoclet merge files.
# All supported databases are defined below, others can easily be added
# See the document doc/howto/HOWTO-database.txt for database specifics and tips and tricks.
# (Note that the names below are fixed for the database type, it is not the name of your database instance.)
# Default: h2
database.name=mysql

# Database connection URL.
# This is the URL used to connect to the database, used to configure a new datasource in JBoss.
# Default: jdbc:h2:~/ejbcadb;DB_CLOSE_DELAY=-1
database.url=${database_url}

# JDBC driver classname.
# The JEE server needs to be configured with the appropriate JDBC driver for the selected database
# The Default h2 works (as test database) on JBoss 7, on JBoss 5 use org.hsqldb.jdbcDriver
# Default: h2
database.driver=${database_driver}

# Database username.
# Default: sa (works with H2 on JBoss 7)
# Set to empty for hsql on JBoss 5
database.username=${database_username}

# Database password.
# Default: sa (works with H2 on JBoss 7)
# Set to empty for hsql on JBoss 5)
database.password=${database_password}

# The encoded certificate may be stored in the table Base64CertData instead of
# in a column in the CertificateData table. Using a separate table for the
# certificate data may speed up searching for certificates if there are lots of
# them (>100Million).
# Default: false
database.useSeparateCertificateTable=true
EOF


cat <<EOF > ejbca-custom/conf/ejbca.properties
#
# \$Id: ejbca.properties.sample 20512 2015-01-05 14:25:14Z mikekushner $
#
# This is a sample file to override properties used
# during development (or deployment) of EJBCA. Note that some properties
# have been moved to cesecore.properties.
# 
# You should copy and rename this file to ejbca.properties
# and customize at will.
#

# Application server home directory used during development. The path can not end with a slash or backslash.
# Default: \$APPSRV_HOME
appserver.home=${ejbca_home}/wildfly

# See also the section 'cluster configuration' for other JBoss options, for example
# for deploying on JBoss EAP.

# Which application server is used? Normally this is auto-detected from 'appserver.home' and should not be configured. 
# Possible values: jboss, glassfish (, weblogic)
# Default: <auto-detect>
#appserver.type=jboss

# To prevent accidental runs of tests or deploying the wrong thing in a production environment, we
# could prevent this by setting this variable to either "true" or "false".
# Setting this value to 'false' will allow system tests to alter the configuration of the running
# EJBCA instance.
# Default: true
ejbca.productionmode=true
#ejbca.productionmode=false

# Set to true to allow dynamic re-configuration using properties files in the file 
# system. Using this you can place a file /etc/ejbca/conf/ocsp.properties in the file system and
# override default values compiled into ejbca.ear.
# Currently this works for most values in ejbca.properties, web.properties, cmp.properties, externalra-caservice.properties, ocsp.properties, extendedkeyusage.properties, jaxws.properties, xkms.properties
#
# Default: false
#allow.external-dynamic.configuration=false

# ------------ Basic CA configuration ---------------------
# Most CA options are configured in cesecore.properties, but some EJBCA-
# specific ones are configured here. When upgrading, the important options are:
# - ca.keystorepass (in cesecore.properties)
# - ca.xkmskeystorepass
# - ca.cmskeystorepass

# Password used to protect XKMS keystores in the database (CAs XKMS signer/enc certificate).
# The default value is the same for convenience.
#ca.xkmskeystorepass=foo123

# Password used to protect CMS keystores in the database (CAs CMS signer/enc certificate).
# The default value is the same for convenience.
#ca.cmskeystorepass=foo123

# ------------- Approval configuration ------------------------
# Settings working as default values in the approval functionality
#
# Default request validity in seconds
# Default : 28800 (8 Hours)
#approval.defaultrequestvalidity=28800
approval.defaultrequestvalidity=86400

# Default approval validity (how long an approved request should stay valid)
# Default : 28800 (8 Hours)
#approval.defaultapprovalvalidity=28800

# Setting excluding some classes from approval. When one of the classes in this list calls a method that normally 
# required approval, the call is immediately allowed, bypassing the approval mechanism. The list is comma separated.
# Uncomment the line below to exclude extra from approvals.
#approval.excludedClasses=org.ejbca.extra.caservice.ExtRACAServiceWorker
# Uncomment the line below to exclude CMP from approval.
#approval.excludedClasses=org.ejbca.core.protocol.cmp.CmpMessageDispatcherSessionBean
# Uncomment the line below to exclude revocation by CMP from approval.
#approval.excludedClasses=org.ejbca.core.protocol.cmp.RevocationMessageHandler
# Default : empty 
#approval.excludedClasses=

# ----------------- cluster configuration ----------------
# The configuration. Use "all" when clustering, 
# or for example "production" when deploying on JBoss EAP.
# Default: default
#jboss.config=all

# Name of the farm directory. Use "farm" when clustering.
# Default: deploy
#jboss.farm.name=farm

#------------------- EJBCA Healthcheck settings -------------
# Specifies the basic settings of the EJBCA Healthcheck servlet
# for more detailed configuration edit the file src/publicweb/healthcheck/WEB-INF/web.xml
# URL: http://localhost:8080/ejbca/publicweb/healthcheck/ejbcahealth
#
# Parameter specifying amount of free memory (Mb) before alarming
# Default: 1
#healthcheck.amountfreemem=1

# Parameter specifying database test query string. Used to check that
# the database is operational.
# Default : Select 1 From CertificateData where fingerprint='XX'
#healthcheck.dbquery=Select 1 From CertificateData where fingerprint='XX'

# Parameter specifying IP addresses authorized to access the healthcheck
# servlet. Use ';' for between multiple IPs.
# IPv6 address can be specified, for example 127.0.0.1;0:0:0:0:0:0:0:1. 
# "ANY" can be specified to allow any remote IP. 
# Default: 127.0.0.1 
#healthcheck.authorizedips=127.0.0.1

# Parameter to specify if the check of CA tokens should actually perform a signature test
# on the CA token, or it should only see if the token status is active.
# Default: false (don't perform a signature operation) 
#healthcheck.catokensigntest=false

# Parameter to specify if a connection test should be performed on each publisher.
# Default: true 
#healthcheck.publisherconnections=true

# Parameter to specify location of file containing information about maintenance
# Use this file to specify weather to include node in healthcheck or report as down for maintenance, 
# which will return an error message (either the property name specified below or a custom message specified in web.xml).
# Default: empty (not used)
#healthcheck.maintenancefile=~/maintenance.properties

# Parameter to configure name of maintenance property, default = DOWN_FOR_MAINTENANCE
# The healthcheck.maintenancefile should contain a single line like this:
# DOWN_FOR_MAINTENANCE=true
# Where the node will be down for maintenance of the property is true, and not down for maintenance if the property is false.
# Default: DOWN_FOR_MAINTENANCE
#healthcheck.maintenancepropertyname=DOWN_FOR_MAINTENANCE

# Text string used to say that every thing is ok with this node.
# Default=ALLOK
#healthcheck.okmessage=ALLOK
 	
# Parameter saying if a errorcode 500 should be sent in case of error.
# Default=true
#healthcheck.sendservererror=true

# Uncomment this parameter if you want a static error message instead of one generated by the HealthChecker.
# Default=null
#healthcheck.customerrormessage=EJBCANOTOK

#------------------- CLI settings -------------
ejbca.cli.defaultusername=ejbca
ejbca.cli.defaultpassword=ejbca

#------------------- Debug and special settings -------------
#
# Custom Available Access Rules. Use ';' to separate multiple access rules
# Available values are the Access Rules strings in Advanced mode of 'Access Rules' in 'Administrator Roles'
# Default: ""
#ejbca.customavailableaccessrules=

# When upgrading a 100% up-time cluster, all nodes should be deployed with the effective version
# of the oldest still running EJBCA version.
# Default: \${app.version.number}
#app.version.effective=4.0.x

# To better protect from off-line brute force attacks of passwords on a compromised database, the
# computationally expensive BCrypt algorithm can be used. Using a higher log-rounds value will
# increase computational cost by log2. 1-31 can be used as BCrypt strength.
# 0 means simple SHA1 hashing will be used. A decent value for high security is ~8.
# Default=1
#ejbca.passwordlogrounds=1

# Parallel publishing invokes all the configured publishers for certificates in parallel instead of
# sequentially. So instead of waiting for the total time it takes to write to all publishers, you
# only have to wait for the time it takes to publish to the slowest one.
#
# This feature is non-compliant with the JEE5 specifications and could potentially have unintended
# side effects (even though none has been found so far).
# If you find any type of problem with this feature that can be mitigated by disabling it, please
# report it to the EJBCA developers or this option will disappear in a future version.
#
# Default: true
#publish.parallel.enabled=true

# ------------------- Peer Connector settings (Enterprise Edition only) -------------------
# These settings are never expected to be used and should be considered deprecated. If you do need
# to tweak this, please inform the EJBCA developers how and why this was necessary.
#
# Don't go through JCA for outgoing connections to peer systems. Applied at build time.
# Default: false
#peerconnector.rar.disabled=false
#
# Use TCP keep alive. Applied when connection pool is restarted. Default: true
#peerconnector.connection.sokeepalive=true
#
# Disable Nagle's algorithm. Applied when connection pool is restarted. Default: false
#peerconnector.connection.tcpnodelay=false
#
# Socket timeout in milliseconds. Applied when connection pool is restarted.
# Default: 20000 (default for Tomcat on the server side)
#peerconnector.connection.sotimeout=20000
#
# Connection pool size per peer connector. Applied when connection pool is restarted. Default: 100
#peerconnector.connection.maxpoolsize=100
#
# Background sync of certificate data. Batch size to compare. Default: 2000
#peerconnector.sync.batchsize=2000
#
# Background sync of certificate data. Number of entries to write in parallel. 1=sequential writes. Default: 12
#peerconnector.sync.concurrency=12
#
# Maximum allowed size for incoming messages. Default: 134217728 (128MiB)
#peerconnector.incoming.maxmessagesize=134217728
#
# How long a peer can be absent in milliseconds before (re-)authentication is triggered. Default: 60000
#peerconnector.incoming.authcachetime=60000
#
# How long to cache outgoing PeerData database objects.
# Default: 60000 (60 seconds)
# Possible values -1 (no caching) to 9223372036854775807 (2^63-1 = Long.MAX_VALUE).
#  If you want caching for an infinite time then set something high for example 157680000000 (5years).  
#peerconnector.cachetime=157680000000
#peerconnector.cachetime=-1
EOF



cat <<EOF > ejbca-custom/conf/install.properties
#
# \$Id$
#
# This is a sample file to override default properties used
# during installation of EJBCA (ant install)
# 
# You should copy and rename this file to install.properties
# and customize at will.
#

# ------------ Administrative CA configuration ---------------------
# This installation will create a first administrative CA. This CA will be used to create the first
# superadministrator and for the SSL server certificate of administrative web server.
# When the administrative web server have been setup you can create other CA:s and administrators.
# This is only used for administrative purposes,
# Enter a short name for the administrative CA.
ca.name=${ca_name}

# The Distinguished Name of the administrative CA. 
# This is used in the CA certificate to distinguish the CA.
# Note, you can not use DC components for the initial CA, you can create CAs 
# using DC components later on once the admin GUI is up and running.
ca.dn=${ca_dn}

# The token type the administrative CA will use.
# Use soft for software generated keys (default) or enter a class path for the HSM class.
# Normally the HSM class should be the PKCS11CryptoToken. 
#
# Possible values are:
# soft
# org.cesecore.keys.token.PKCS11CryptoToken
# se.primeKey.caToken.card.PrimeCAToken
# Note: If you use JBoss 7/EAP 6 and want to use PKCS#11 you have to configure JBoss to permit this. 
#       See instructions in the Install Guide.
#
# Default: soft
ca.tokentype=soft

# Password for the administrative CA token.
# With soft token, use password null.
# To prompt for the password on the terminal, don't set, i.e. comment out the line below.
# If no password should be used (for example nCipher module protected), use password '' (nothing).
ca.tokenpassword=null

# Configuration file were you define key name, password and key alias for the HSM used 
# by the administrative CA. Same as the Hard CA Token Properties in Admin gui.
# Remove everything in the file and add your own configuration.
# Note that this must be a full path.
# On windows use / instead of \
#ca.tokenproperties=${ejbca_home}/ejbca/conf/catoken.properties

# The keyspec for the administrative CAs key, to be generated in soft keystore.
# Keyspec for RSA keys is size of RSA keys (1024, 2048, 4096, 8192).
# Keyspec for ECDSA keys is name of curve or 'implicitlyCA', see docs.
ca.keyspec=4096

# The keytype for the administrative CA, can be RSA, ECDSA or DSA
# For the key to be generated in soft keystore.
ca.keytype=RSA

# Default signing algorithm for the administrative CA.
# Available algorithms are:
# SHA1WithRSA, SHA1withECDSA, SHA256WithRSA, SHA256withECDSA.
ca.signaturealgorithm=SHA256WithRSA

# The validity in days for the administrative CA, only digits.
ca.validity=99999

# The policy id of the administrative CA. Policy id determines which PKI policy the CA uses.
# Type your policy id or use '2.5.29.32.0' for 'any policy' (rfc5280) or 'null' for no policy at all.
ca.policy=null

# Certificate profile used for the CA certificate created during 'ant install'. 
# If you have a certificate profile imported you can use that. Otherwise default
# profile for ROOTCA is used.
# Default: ROOTCA
#ca.certificateprofile=MyOwnRootCACertificateProfile
EOF


cat <<EOF > ejbca-custom/conf/log.properties
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<appender name="EJBCAFILE" class="org.apache.log4j.RollingFileAppender">
		<param name="File" value="\${jboss.server.log.dir}/ejbca.log" />
        <param name="Append" value="true" />
        <param name="MaxFileSize" value="10240KB" />
        <!--
        <param name="MaxBackupIndex" value="0" />
        -->
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%d %-5p [%c] (%t) %m%n"/>
        </layout>           
     </appender>

	<appender name="OcspTransactionLogger" class="org.apache.log4j.RollingFileAppender">
		<param name="File" value="\${jboss.server.log.dir}/transaction.log" />
		<param name="Threshold" value="DEBUG"/>
        <param name="Append" value="true" />
        <param name="MaxFileSize" value="10240KB" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%m%n"/>
        </layout>           
     </appender>

	<appender name="OcspAuditLogger" class="org.apache.log4j.RollingFileAppender">
		<param name="File" value="\${jboss.server.log.dir}/audit.log" />
		<param name="Threshold" value="DEBUG"/>
        <param name="Append" value="true" />
        <param name="MaxFileSize" value="10240KB" />
        <layout class="org.apache.log4j.PatternLayout">
            <param name="ConversionPattern" value="%m%n"/>
        </layout>           
     </appender>
     
    <!-- Sample loggers using SaferDailyRollingFileAppender. Replace the above with these if using. 
	<appender name="OcspTransactionLogger" class="org.cesecore.util.log.SaferDailyRollingFileAppender">
     	<errorHandler class="org.cesecore.util.log.ProbableErrorHandler" />
		<param name="File" value="\${jboss.server.log.dir}/transaction.log" />
		<param name="Append" value="true" />
		<param name="Threshold" value="DEBUG"/>	
		<param name="DatePattern" value="'.'yyyy-MM-dd_HH" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%m%n" />
		</layout>
	</appender>

	<appender name="OcspAuditLogger" class="org.cesecore.util.log.SaferDailyRollingFileAppender">
		<errorHandler class="org.cesecore.util.log.ProbableErrorHandler" />
        <param name="File" value="\${jboss.server.log.dir}/audit.log" />
        <param name="Append" value="true" />
        <param name="Threshold" value="DEBUG"/>
        <param name="DatePattern" value="'.'yyyy-MM-dd" />
        <layout class="org.apache.log4j.PatternLayout">
        	<param name="ConversionPattern" value="%m%n" />
        </layout>
    </appender>
    --> 

	<category name="org.cesecore.certificates.ocsp.logging.TransactionLogger" additivity="false">
		<priority value="DEBUG"/>
		<appender-ref ref="OcspTransactionLogger"/>
	</category>
	
	<category name="org.cesecore.certificates.ocsp.logging.AuditLogger" additivity="false">
		<priority value="DEBUG"/>
		<appender-ref ref="OcspAuditLogger"/>
	</category>
	
	
	<!-- DEBUG is enabled by default from the root category in the end -->
	<!--
	<category name="org.ejbca">
        <priority value="TRACE"/>
    </category>

    <category name="org.cesecore">
        <priority value="TRACE"/>
    </category>
	-->
	
	<!-- Limit some debug output, even when debug for EJBCA is enabled -->
	<category name="org.apache.commons">
		<priority value="INFO"/>
	</category>
	<category name="org.apache.myfaces">
		<priority value="INFO"/>
	</category>
	<category name="org.hibernate.ejb">
		<priority value="INFO"/>
	</category>
	<category name="org.hibernate.cfg">
		<priority value="INFO"/>
	</category>
	<category name="org.hibernate.impl.SessionFactoryImpl">
		<priority value="INFO"/>
	</category>
	<category name="org.hibernate.hql.ast.AST">
		<priority value="INFO"/>
	</category>
	<category name="org.hibernate.pretty.Printer">
		<priority value="INFO"/>
	</category>

	<root> 
		<priority value="DEBUG" />
		<appender-ref ref="EJBCAFILE"/>
	</root> 

</log4j:configuration>
EOF


cat <<EOF > ejbca-custom/conf/mail.properties
# ------------ Mail configuration ---------------------

# Used to send notification email from the RA.
# See \${ejbca.home}/src/appserver/ejbca-mail-service.xml
# It will be copied in \${jboss.server.dir}/deploy/ejbca-mail-service.xml

# Note that in JBoss 5.1.0 there is a bug so that only one mail configuration can be used.
# Whatever mail configuration we deploy in \${jboss.server.dir}/deploy/ejbca-mail-service.xml 
# is overridden by the default configuration in \${jboss.server.dir}/deploy/mail-service.xml.
# The solution is to delete the file \${jboss.server.dir}/deploy/mail-service.xml.

# The JNDI-name used to send email notifications from EJBCA.
# Not that this differs between different application servers, see installation for 
# instructions for your appserver. The default works for JBoss.
# For Weblogic use 'mail/EJbcaMail'.
#
# Default: java:/EjbcaMail
#mail.jndi-name=java:/EjbcaMail
#mail.jndi-name=mail/EjbcaMail

# user/password to connect to server for sending email notifications from EJBCA.
# Default: ejbca_user, primekey
#mail.user=ejbca_user
#mail.password=

# SMTP server for sending mail.
# Default: localhost
#mail.smtp.host=localhost

# SMTP server port.
# Default: 25
#mail.smtp.port=25

# Use SMTP authentication if you smtp host requires it
# Default: false
#mail.smtp.auth=false

# Switch connection to a TLS-protected connection (if supported by server) before login.
# Default: false
#mail.smtp.starttls.enable=false

# Email address used to send emails.
# Default: ejbca-donotreply@domain.com
#mail.from=ejbca-donotreply@domain.com

# JavaMail debug info.
# Default: false
#mail.debug=false

# Content encoding for the email message body.
# Default: UTF-8
#mail.contentencoding=UTF-8
EOF





cat <<EOF > ejbca-custom/conf/ocsp.properties
# ------------ OCSP responder configuration ---------------------
# These configurations are used both for EJBCA and the Validation Authority (VA).
#
# These values are used for OCSP responses signed by a CA and as defaults for delegated OCSP signing by OcspKeyBindings.
# Certificate Profile or URL specific configuration here will still override the configured values of an OcspKeyBinding.

# OCSP servlet enabled. If false there will be no servlet.
# Default is true.
#ocsp.enabled=false

# Context root (the path in the URL)
# Default is '/\${app.name}/publicweb/status'
#ocsp.contextroot=/status

# DEPRECATED VALUE
# Deprecated since 6.2.4. The current value will be used to perform upgrade at first startup, and may be removed afterwards. 
#
# Specifies the subject of a certificate which is used to identify the 
# responder which will generate responses when no real CA can be found from the request. 
# This is used to generate 'unknown' responses when a request is received for a certificate 
# that is not signed by any CA on this server. Recommended to use same as ca.dn.
#
# For the internal OCSP responder this is the subject DN of the CA to use for signing
# For an external OCSP responder this is the issuer DN of the OCSP responders certificate to use for signing, i.e. the CAs subject DN.
ocsp.defaultresponder=${ca_dn}

# If set to false the OCSP responses will only contain the signature certificate (if ocsp.includesignercertinresponse is set to 'true'), 
# and not the whole certificate chain of the OCSP responder.
# Default true.
#ocsp.includecertchain=true

# If set to false, the  OCSP response will not contain the signing certificate.
# Default true 
#ocsp.includesignercert=true

# Defines the ResponderID type as defined in RFC2560. Set to name for the Name type and keyhash for the KeyHash type.
# Possible values: name, keyhash
# Default: keyhash 
#ocsp.responderidtype=keyhash

# Specifies which signature algorithms should be used on OCSP responses. You can specify several algorithm
# separated by ';'. If RSA keys are used in the OCSP signing certificate, the algorithm with RSA will be used, and
# if ECDSA keys are used in the OCSP signing certificate, the algorithm with ECDSA will be used and if 
# DSA keys are used in the OCSP signing certificate, the algorithm with DSA will be used.
#
# Default: SHA1WithRSA;SHA1WithECDSA;SHA1WithDSA
#ocsp.signaturealgorithm=SHA1WithRSA;SHA1WithECDSA;SHA1WithDSA

# The interval on which the the OCSP signing certificates are updated in seconds.
# If set to 0 or negative these certificate are never updated.
# Default: 300
#ocsp.signingCertsValidTime=0

# When a signing certificate is about to expire a WARN message could be written to log4j each time the key of the certificate is used.
# This property defines when this message is started to be written.
# The property is set to the number of seconds before the expiration that the WARN message starts to be written.
# If set to 0 the warning is disabled.
# Default: 604800 (1 week)
#ocsp.warningBeforeExpirationTime=10000

# If true a certificate that does not exist in the database, but is issued by a CA the responder handles
# will be treated as not revoked. Default (when value is false) is to treat is as "unknown". Since the OCSP responders database normally contains all issued certificate
# this gives sensible values (in line with RFC6960) to "ok", "revoked" and "unknown" certificates.
# Setting this value to true is useful if you want an External OCSP responder database to only contain revoked certificates, and not
# all certificates. In this case the responder will answer "ok" to requests for certificates that do not exist in the database. 
# If both 'ocsp.nonexistingisgood' and 'ocsp.nonexistingisrevoked' are set to 'true', the responder will answer "ok".
#
# Default: false
#ocsp.nonexistingisgood=false

# The value of 'ocsp.nonexistingisgood=false' may be overridden if the URL that the client used to send the request is matching some regular expression.
# The regular expressions that if any of them is fulfilled will override 'ocsp.nonexistingisgood=false' is numbered from 1 and up. It may be any numbers.
# Here follows an example of 2:
#ocsp.nonexistingisgood.uri.1=.*/thisEndingIsGood$
#ocsp.nonexistingisgood.uri.2=^http://good.myhost.nu:8080/.*

# The value of 'ocsp.nonexistingisgood=true' may be overridden if the URL that the client used to send the request is matching some regular expression.
# The regular expressions that if any of them is fulfilled will override 'ocsp.nonexistingisgood=true' is numbered from 1 and up. It may be any numbers.
# Here follows an example of 2:
#ocsp.nonexistingisbad.uri.1=.*/thisEndingIsBad$
#ocsp.nonexistingisbad.uri.2=^http://bad.myhost.nu:8080/.*

# If true a certificate that does not exist in the database, but is issued by a CA the responder handles,
# will be treated as revoked; the revocation reason will be "Certificate Hold" and the revocation time is January 1st, 1970 (compliant with RFC6960). 
# Default (when this value and value of "Non existing is good" are false) is to treat it as "unknown".
# If both "Non existing is good" and "Non existing is revoked", the responder will answer "ok".
#
# Default: false
#ocsp.nonexistingisrevoked=false

# The value of 'ocsp.nonexistingisrevoked=false' may be overridden if the URL that the client used to send the request is matching some regular expression.
# The regular expressions that if any of them is fulfilled will override 'ocsp.nonexistingisrevoked=false' is numbered from 1 and up. It may be any numbers.
# Here follows an example of 2:
#ocsp.nonexistingisrevoked.uri.1=.*/thisEndingIsRevoked$
#ocsp.nonexistingisrevoked.uri.2=^http://revoked.myhost.nu:8080/.*

# An OCSP responder MAY choose to retain revocation information beyond a certificate's expiration.  The date obtained by subtracting this
# retention interval value from the producedAt time in a response is defined as the certificate's "archive cutoff" date.
# To illustrate, if a server is operated with a 7-year retention interval policy and status was produced at time t1, then the value
# for ArchiveCutoff in the response would be (t1 - 7 years).
#
# OCSP-enabled applications would use an OCSP archive cutoff date to contribute to a proof that a digital signature was (or was not)
# reliable on the date it was produced even if the certificate needed to validate the signature has long since expired
# The value of this configuration should be set to the number of seconds of this retention interval. To disable the archive cutoff extension, 
# the value of this configuration should be set to '-1'
#
# Default: 31536000 (1 year)
#ocsp.expiredcert.retentionperiod = 31536000
#ocsp.expiredcert.retentionperiod = -1

# For HTTP get requests according to RFC5019 we can set HTTP headers in the response to allow caching proxies to cache responses.
# untilNextUpdate is the number of seconds a response will be valid. 0 = disable.
# Default: 0
#ocsp.untilNextUpdate = 0

# You can also specify different nextUpdate values depending on which certificate profiles the certificate was issued by.
# This only works when you have published using EJBCA 3.9.0 or later, where the certificateProfileId column in the CertificateData table is populated.
# You can find the certificateProfileId (999 in the example below) in the admin GUI.
# If no specific certificateProfileId is specified the default value from ocsp.untilNextUpdate is used.
#ocsp.999.untilNextUpdate = 50

# For HTTP get requests according to RFC5019 we can set HTTP headers in the response to allow caching proxies to cache responses.
# untilNextUpdate is the number of seconds a response will be valid. 0 = disable.
# If this configuration is set, its value will override the global value in case of certificate with a revoked status..
# Default: 0
#ocsp.revoked.untilNextUpdate = 0

# You can also specify different nextUpdate values depending on which certificate profiles the certificate was issued by.
# This only works when you have published using EJBCA 3.9.0 or later, where the certificateProfileId column in the CertificateData table is populated.
# You can find the certificateProfileId (999 in the example below) in the admin GUI.
# If no specific certificateProfileId is specified the default value from ocsp.untilNextUpdate is used.
# If this configuration is set, its value will override the global value in case of certificate with a revoked status..
#ocsp.999.revoked.untilNextUpdate = 50

# For HTTP get requests according to RFC5019 we can set HTTP headers in the response to allow caching proxies to cache responses.
# maxAge is how long a response will be cached, in seconds. Should be less than untilNextUpdate.
# Ignored if untilNextUpdate is disabled. 0 = disable.
# Note that for responses of certificates with unknown status, the HTTP response header "Cache-control" will not contain the max age, but 
# "no-cache, must-revalidate" instead. That is to prevent caching of unknown status.
# Default: 30
#ocsp.maxAge = 30

# You can also specify different maxAge values depending on which certificate profiles the certificate was issued by.
# This only works when you have published using EJBCA 3.9.0 or later, where the certificateProfileId column in the CertificateData table is populated.
# You can find the certificateProfileId (999 in the example below) in the admin GUI.
# If no specific certificateProfileId is specified the default value from ocsp.maxAge is used.
#ocsp.999.maxAge = 100

# For HTTP get requests according to RFC5019 we can set HTTP headers in the response to allow caching proxies to cache responses.
# maxAge is how long a response will be cached, in seconds. Should be less than untilNextUpdate.
# Ignored if untilNextUpdate is disabled. 0 = disable.
# Note that for responses of certificates with unknown status, the HTTP response header "Cache-control" will not contain the max age, but 
# "no-cache, must-revalidate" instead. That is to prevent caching of unknown status.
# If this configuration is set, its value will override the global value in case of certificate with a revoked status.
# Default: 30
#ocsp.revoked.maxAge = 30

# You can also specify different maxAge values depending on which certificate profiles the certificate was issued by.
# This only works when you have published using EJBCA 3.9.0 or later, where the certificateProfileId column in the CertificateData table is populated.
# You can find the certificateProfileId (999 in the example below) in the admin GUI.
# If no specific certificateProfileId is specified the default value from ocsp.maxAge is used.
# If this configuration is set, its value will override the global value in case of certificate with a revoked status.
#ocsp.999.revoked.maxAge = 100

# Specifies OCSP extension oids that will result in a call to an extension class, 
# separate multiple entries with ';'
# For any entry that should be always used, preface with '*' (e.g. *2.16.578.1.16.3.2)
# Leave out if you do not know what this is.
# Example value: 2.16.578.1.16.3.2 (Unid)
# Example value: *1.3.36.8.3.13 (CertHash)
# Default: nothing 
#ocsp.extensionoid=

# Specifies classes implementing OCSP extensions matching oids above, 
# separate multiple entries with ;"
# Leave out if you do not know what this is.
# Example value: org.ejbca.core.protocol.ocsp.OCSPUnidExtension
# Example value: org.ejbca.core.protocol.ocsp.extension.certhash.OcspCertHashExtension
# Default: nothing
#ocsp.extensionclass=

# Datasource for Unid-Fnr mapping OCSP extension. 
# Leave out if you do not know what this is.
# No default value, must be set if the extension is used
#ocsp.uniddatsource=

# Directory containing certificates of trusted entities allowed to query for Fnrs. 
# Leave out if you do not know what this is.
# No default value, must be set if the extension is used
#ocsp.unidtrustdir=

# File containing the CA-certificate, in PEM format, that signed the trusted clients. 
# Leave out if you do not know what this is.
# No default value, must be set if the extension is used
#ocsp.unidcacert=

# Specifies if the OCSP-responder should require signed requests or not.
# If signature is required, the signature certificate must be issued by a CA handled by the OCSP responder.
#
# Default: false
#ocsp.signaturerequired=false

# Timeout setting for the Global OCSP configuration cache. Once the cache has timed out it will be reread from the 
# database.
#
# Default: 30000ms 
#ocspconfigurationcache.cachetime=30000

#------------------- Re-keying used by external OCSP responder------------------------------
# When this feature is enabled a new signing key will automatically be generated a specified time before the certificate of the used key expires.
# A certificate for the new key will be fetched by WS from EJBCA.
# You also need to configure an AuthenticationKeyBinding as client SSL credential. (It will be created for you
# during upgrade to EJBCA 6.0.0 where a client SSL keystore existed previously.)

# Password for rekeying via the servlet. 
# Default: null
#ocsp.rekeying.trigging.password=

# URL to webservice from which the certificate for a newly generated OCSP responder key should be fetched.
# The automatic re-keying feature is disabled if this property is not defined.
# Default: null
#ocsp.rekeying.wsurl = https://milton:8443/ejbca/ejbcaws/ejbcaws

# Specifies how often the signing certificates should be checked. Default value is 3600 seconds, but consider lowering this value if signing certificates are expected
# to be valid less than 24h 
#ocsp.rekeying.update.time.in.seconds=

# Specifies how much safety margin a certificate should have before it's updated, i.e when it should be considered a candidate for renewal. The effective
# validity time for a signing certificate is it's actual validity minus this value. Timer will output warnings if this value is less than the update time.
#
# The default for this value is 24h 
#ocsp.rekeying.safety.margin.in.seconds=

# Limits what hosts may request a manual rekeying via web service. Multiple hosts may be separated with a semicolon. 
# Default: 127.0.0.1
#ocsp.rekeying.trigging.hosts=

#------------------- OCSP Logging settings -------------
# Transaction logging logs summary lines for all OCSP request/responses, which can be used for charging clients if you are running a commercial OCSP service.
# Specifies if transaction logging should be performed from the OCSP responder and formats how that information should be logged yyyy-MM-dd:HH:mm:ss
# Change below to true if you want transaction information to be logged
#
# See the OCSP installation guide for more details on the transaction and audit logging.
#
# Default: false
#ocsp.trx-log = true

# Configure how time of logging in auditlog will be output
# Default: yyyy-MM-dd:HH:mm:ss:z
#ocsp.log-date = yyyy-MM-dd:HH:mm:ss:z

# Configure which time zone will be used for logging
# Default: GMT
#ocsp.log-timezone = GMT

# A pattern for use with ocsp.trx-log-order to replace constants with values during logging
# Default: \\$\\{(.+?)\\}
#ocsp.trx-log-pattern = \\$\\{(.+?)\\}

# Use ocsp.trx-log-order to specify what information should be logged and in what order. You can also configure what characters you want in between
# See OCSP Installation guide for documentation of all parameters.
# Default: \${SESSION_ID};\${LOG_ID};\${STATUS};\${REQ_NAME}"\${CLIENT_IP}";"\${SIGN_ISSUER_NAME_DN}";"\${SIGN_SUBJECT_NAME}";\${SIGN_SERIAL_NO};"\${LOG_TIME}";\${REPLY_TIME};\${NUM_CERT_ID};0;0;0;0;0;0;0;"\${ISSUER_NAME_DN}";\${ISSUER_NAME_HASH};\${ISSUER_KEY};\${DIGEST_ALGOR};\${SERIAL_NOHEX};\${CERT_STATUS}
#ocsp.trx-log-order = \${SESSION_ID};\${LOG_ID};\${STATUS};\${REQ_NAME}"\${CLIENT_IP}";"\${SIGN_ISSUER_NAME_DN}";"\${SIGN_SUBJECT_NAME}";\${SIGN_SERIAL_NO};"\${LOG_TIME}";\${REPLY_TIME};\${PROCESS_TIME};\${NUM_CERT_ID};0;0;0;0;0;0;0;"\${ISSUER_NAME_DN}";\${ISSUER_NAME_HASH};\${ISSUER_KEY};\${DIGEST_ALGOR};\${SERIAL_NOHEX};\${CERT_STATUS}

# Audit logging logs the complete requests and responses, which can be used to trace complete transaction afterwards.
# change ocsp.audit-log to true of you want audit logging turned on
# Default: false
#ocsp.audit-log = true

# A pattern for use with ocsp.audit-order to replace constants with values during logging
# Default: \\$\\{(.+?)\\}
#ocsp.audit-log-pattern = \\$\\{(.+?)\\}

# Use ocsp.audit-log-order to specify what information should be logged and in what order. You can also configure what characters you want in between
# See OCSP Installation guide for documentation of all parameters.
# Default: ocsp.audit-log-order = SESSION_ID:\${SESSION_ID};LOG ID:\${LOG_ID};"\${LOG_TIME}";TIME TO PROCESS:\${REPLY_TIME};\\nOCSP REQUEST:\\n"\${OCSPREQUEST}";\\nOCSP RESPONSE:\\n"\${OCSPRESPONSE}";\\nSTATUS:\${STATUS}
#ocsp.audit-log-order = SESSION_ID:\${SESSION_ID};LOG ID:\${LOG_ID};"\${LOG_TIME}";REPLY TIME:\${REPLY_TIME};\\nTIME TO PROCESS:\${PROCESS_TIME};\\nOCSP REQUEST:\\n"\${OCSPREQUEST}";\\nOCSP RESPONSE:\\n"\${OCSPRESPONSE}";\\nSTATUS:\${STATUS}

# Set to true if you want transactions to be aborted when logging fails
# This option needs other configuration changes as well, see  "Safer Log4j Logging" in the OCSP install guide for more information
# Default: false
#ocsp.log-safer = true
EOF

cat <<EOF > ejbca-custom/conf/scepra.properties
#####
# Configuration file for default values for the External RA SCEP RA Server.
# Configure as you please, but all values must be set to something.
#
# Default values (that you enter here) is built into the application and deployed
# as default values.
#
# 'datasource.jndi-name-prefix' (see conf/database.properties.sample) and 'appserver.home'
# (see conf/ejbca.properties.sample) also has to be configured. 
#####

# Allow dynamic re-configuration.
#
# By setting this property to true, you can also dynamically re-configure
# the RA by changing values in properties files in the file system.
# 
# You can put a scepra.properties file in your "app server runtime home"/conf directory
# to override these values. To find out which this directory is, it is logged during startup as for example:
# [ExtraConfiguration] Added file to configuration source: /opt/jboss-4.2.2.GA/bin/conf/scepra.properties
# This file is re-read if changed so changes can be made in runtime.
#
# You can put a /etc/ejbca/conf/extra/scepra.properties file to override these values.
# This file is re-read if changed so changes can be made in runtime.
#
# Finally you can override anything by setting system properties for your appserver, for example:
# java -Dscep.ra.authpwd=mysecret
allow.external-dynamic.configuration=false


#
# Settings for the Stand-alone SCEP RA Server.
# The stand-alone SCEP RA sevrer is deployed as an using External RA. 
# See admin guide for more information about the External RA.  
#

# Path to RA keystore. Should be a full pathname.
scep.ra.keyStorePath.1=${ejbca_home}/scep/sceprakeystore.p12

# Password to the RA keystore configured above
scep.ra.keyStorePassword.1=${scep_ra_keyStorePassword_1}

# Advanced users: In theory it is possible to have several SCEP RAs configured with different keystores. 
# In that case add more keystores with .2 etc. And configure new Servlets and mappings in src/WEB-INF/web.xml 
# with these keystoreNumber.
  
# Set to another value than none if the Scep RA should require 
# a specific password in the SCEP request. 
# This should be used with createOrEditUser=true and will in this case be a set password 
# required in the SCEP Request message. If this password is correct, the request will be automatically granted. 
#
# Leave as 'none' to not require any password, i.e. allow anything.
# If createOrEditUser=false this will require the user to be pre-registered and the password in the request will
# be used to authenticate this user with the pre-registered password.
#
# If createOrEdit=false and authPwd=none you can also use Approvals in EJBCA to require an administrator to 
# approve the request in the CA Admin-GUI before a certificate is issued. 
scep.ra.authPwd=none

# Which generation scheme should be used, RANDOM, DN or USERNAME for base username. FIXED to have a fixed username.
# Random will generate a 12 character long random username.
# DN will take a part of the request DN, which part is defined by cmp.ra.namegenerationparameters, and use as the username.
# USERNAME will use the request DN as username.
# If the same username is constructed (for example UID) as an already existing user, the existing user will be modified with
# new values for profile etc, and a new certificate will be issued for that user.
#
# Default: DN
scep.ra.namegenerationscheme=DN

# Parameters for name generation, for DN it can be for example CN, UID or SN. 
# Either the CN or the UID from the request can be used. 
# You can add several in order to have fall-back in case the first does not exist in the DN, for example UID;SN;CN. First try UID, 
#if it does not exist try SN (SerialNumber) etc. 
# For FIXED namegenerationscheme the username will be the value specified here.
#
# Default: CN
scep.ra.namegenerationparameters=CN

# Prefix to generated name, a string that can contain the markup \${RANDOM} to insert 10 random chars.
# Example: 'MyPrefix - \${RANDOM}-' using RANDOM password generation will create a username like 'MyPrefix - DGR89NN54QW-GDHR473NH87Q
#
# Default: empty
#scep.ra.namegenerationprefix=

# Postfix to generated name, a string that can contain the markup \${RANDOM} to insert 10 random chars.
# Example: MyPostfix - \${RANDOM}
#
# Default: empty
#scep.ra.namegenerationpostfix=

# Defines if a request to the RA will create a new user, or edit an existing in EJBCA. If false users must be 
# pre-registered in EJBCA with a pwd. 
# Note that even when the SCEP request is sent to the RA specific URL, if this option is set to 'false', no users will be added or edited
#
# Default: false
scep.ra.createOrEditUser=true

# The Certificate profile used to register new SCEP users, if createOrEditUser=true.
scep.ra.certificateProfile=ENDUSER

# The End entity profile used to register new SCEP users, if createOrEditUser=true.
scep.ra.entityProfile=EMPTY

# The default CA used to register new SCEP users, if createOrEditUser=true.
scep.ra.defaultCA=ScepCA

# Mapping a CAs issuer DN (as from the Admin-GUI->Edit CAs), which will be 
# received from the client to a CA name.
# This is used to find a CA from the request. If no CA can be found with a mapping, the defaultCA is used.
# You can create several mappings for different CAs like this.
# This is only used by the External RA SCEP Server, i.e. because there is no database with CAs to look in. 
# In the SCEP server in the CA the CAName is looked up in the CA database, but in the External RA server there is no other 
# information about CAs.
# Note that all =, : or whitespace must be escaped with a \. See example below. 
# CN\=Demo Scep\ CA,O\=EJBCA\ Sample,C\=DE=ScepCA

# Database connection information. The right JDBC driver has to be installed manually in the application server.
# SQL dialect is derived from the JDBC URL.
# Default: jdbc:mysql://127.0.0.1/messages
#scep.ra.datasource.jdbc-url=jdbc:mysql://127.0.0.1/messages

# JDBC driver classname.
# The JEE server needs to be configured with the appropriate JDBC driver for the selected database
# Default: com.mysql.jdbc.Driver
#externalra-database.driver=org.mariadb.jdbc.Driver
#externalra-database.driver=com.mysql.jdbc.Driver
#externalra-database.driver=org.postgresql.Driver
#externalra-database.driver=org.hsqldb.jdbcDriver
#externalra-database.driver=oracle.jdbc.driver.OracleDriver
#externalra-database.driver=com.ibm.db2.jcc.DB2Driver

# Username for database connection.
# Default: ejbca
#scep.ra.datasource.username=ejbca

# Password for database connection.
# Default: ejbca
scep.ra.datasource.password=${scep_ra_datasource_password}
EOF

cat <<EOF > ejbca-custom/conf/va.properties
#------------------- Validation Authority (VA) Healthcheck settings -------------
# Specifies the basic settings of the VA healthcheck
# (i.e. VA specific health checks that runs as part of EJBCA healthcheck).
#
# For more information see healthcheck settings in ejbca.properties.
#
# Configure these options if you are configuring a VA now.

# Most of the old ocsphealthcheck.* properties have been moved
# to healthcheck.* in ejbca.properties

# Parameter to configure if all available signing keys should be tested.
# The test will fail if any of the available signing keys is not working or if there are no available signing keys.
# If the OCSP responder is disable the test will always succeed.
# Default: true
#ocsphealthcheck.signtest=false

# True if the healthcheck should check the validity of all signing certificates.
# If your cluster of responders have the same expiration time for all signing certificates it could be better not to check since
# it might be better to sign with an old certificate than not signing at all. Otherwise it is usually a good idea to do this check
# and exclude a responder with no valid signing certificate.
# If the OCSP responder is disable the test will always succeed.
# Default: true
#ocsphealthcheck.checkSigningCertificateValidity=false



#------------------- Validation Authority (VA) Certificate and CRL Store setting -------------
# Below you will find setting common for Certificate and CRL Store:

# You may define alias for the sKIDHash hash.
# The example below defines the alias 'root' for 'O4RdnGNf3WPioslAQsX71aR1/MI' and then:
# http://myhost.com:8080/certificates/search.cgi?sKIDHash=O4RdnGNf3WPioslAQsX71aR1/MI is the same as http://myhost.com:8080/certificates/search.cgi?alias=root
# http://myhost.com:8080/crls/search.cgi?sKIDHash=O4RdnGNf3WPioslAQsX71aR1/MI is the same as http://myhost.com:8080/crls/search.cgi?alias=root
# http://myhost.com:8080/crls/search.cgi?sKIDHash=O4RdnGNf3WPioslAQsX71aR1/MI&delta= is the same as http://myhost.com:8080/crls/search.cgi?alias=root&delta=
# Copy the sKIDHash from http://myhost.com:8080/crls/search.cgi or http://myhost.com:8080/certificates/search.cgi and paste it in the config file and restart the application server.
# The downloaded file will use the alias for the name.
# Here is the example:
#va.sKIDHash.alias.root=O4RdnGNf3WPioslAQsX71aR1/MI
EOF


cat <<EOF > ejbca-custom/conf/web.properties
# ------------ Web GUI configuration ---------------------
# When upgrading, the important options are:
# - httpsserver.password

# If you prefer to manually configure the web settings for your application
# server, you should uncomment this property. Enabling this option will prevent
# the 'ant web-configure' command from making any changes to the configuration
# of your application server (in terms of web settings, like paths etc).
# Can not be set to false, commented away means that web will be configured.
#web.noconfigure=true

# If you enable this option, the 'ant web-configure' command will not set-up the
# SSL access on your application server. This is normally desired for the OCSP
# responder or Validation Authority (unless you want to run them over https as
# well). Normally, in case of a CA build you should _not_ enable this option
# (otherwise you won't have access to the administration web interface). If you
# wish to use the Unid functionality on the OCSP responder, make sure to also
# have a look at the 'Configuring TLS on the Unid lookup server' how-to.
# Can not be set to false, commented away means that web will be configured.
# web.nosslconfigure=true

# Password for java trust keystore (p12/truststore.jks). Default is changeit
# This truststore will contain the CA-certificate after running 'ant javatruststore'
# Run 'ant -Dca.name=FooCA javatruststore' to install the CA-certificate for FooCA instead of the default ManagementCA
java.trustpassword=${truststorepass}

# The CN and DN of the super administrator.
# Comment out if you want 'ant install' to prompt for this.
superadmin.cn=${superadmin_cn}
# Note that superadmin.dn must start with the same CN as in superadmin.cn.
# example:  superadmin.dn=CN=\${superadmin.cn},${BASE_DN}
superadmin.dn=CN=\${superadmin.cn}

# The password used to protect the generated super administrator P12 keystore (to be imported in browser).
# Choose a good password here.
superadmin.password=ejbca

# Set this to false if you want to fetch the certificate from the EJBCA public web pages, instead of
# importing the P12-keystore. This can be used to put the initial superadmin-certificate on a smart card.
superadmin.batch=true

# The password used to protect the web servers SSL keystore. Default is serverpwd
# Choose a good password here.
# If upgrading from EJBCA 3.1, enter here the password found in 
#   \$JBOSS_HOME/server/default/deploy/jbossweb-tomcat55.sar/server.xml
#   under the section about 'HTTPS Connector...', the password is in attribute 'keystorePass=...'.
httpsserver.password=${httpsserver_password}

# The CA servers DNS host name, must exist on client using the admin GUI.
httpsserver.hostname=${httpsserver_hostname}

# The Distinguished Name of the SSL server certificate used by the administrative web gui.
# The CN part should match your host's DNS name to avoid browser warnings.
httpsserver.dn=CN=${httpsserver_hostname},${BASE_DN}

# The Alternative Name (certificate extension) of the SSL server certificate used by the administrative web gui.
# The dnsName part should match your hosts DNS name (and the CN above) to avoid browser warnings.
# Set automatically, so no need to change this property unless you want something exotic.
#httpsserver.an=dnsName=${httpsserver_hostname}

# The public port JBoss will listen to http on
# Default 8080
#httpserver.pubhttp=8080

# The public port JBoss will listen to https on, no client cert required
# Default 8442
#httpserver.pubhttps=8442

# The private port JBoss will listen to https on, client cert required
# Default 8443
#httpserver.privhttps=8443

# The private port exposed externally, i.e. if you run an Apache proxy in front of JBoss
# the port may be 443 instead.
# Default same as httpserver.privhttps
httpserver.external.privhttps=443
 
# The fully qualified domain name (FQDN) of the front-end, e.g. an Apache proxy
#   In order to build absolute URL, the server name is got from the web client request.
#   But with an Apache proxy, via ProxyPass directive, the server name is 'localhost'.
# Use:
#   - empty: without Apache proxy, or with Apache proxy via AJP (not with ProxyPass)
#   - ${httpsserver_hostname}: when an Apache proxy is used on the same server than EJBCA
#   - any FQDN: when an Apache proxy with a ProxyPass directive is used (on any server)
# Default: (empty)
#httpserver.external.fqdn=
#httpserver.external.fqdn=${httpsserver_hostname}
 
# The interfaces JBoss will bind to. E.g. 127.0.0.1 will only allow connections from localhost.
# You can also specify \${jboss.bind.address} to use JBoss configuration which interface to listen on.
# Default 0.0.0.0
httpsserver.bindaddress.pubhttp=0.0.0.0
httpsserver.bindaddress.pubhttps=0.0.0.0
httpsserver.bindaddress.privhttps=0.0.0.0

# Defines the available languages by ISO 639-1 language codes separated with a comma (example: en,zh).
# If you are not sure that you know how to add a new language (languagefile.xx.properties, etc.), 
# we suggest you stick with the default the first time you install if you wan't to add your own language.
# Otherwise you may not be able to log in to the Admin GUI.
# Default: en,bs,de,es,fr,it,ja,pt,sv,uk,zh
#web.availablelanguages=en,bs,de,es,fr,it,ja,pt,sv,uk,zh

# Default content encoding used to display JSP pages, for example ISO-8859-1, UTF-8 or GBK.
# Default: UTF-8
web.contentencoding=UTF-8

# The language configuration that should be used internally for logging, exceptions and approval
# notifications has been moved to ejbca.properties from EJBCA 3.10.

# Setting to indicate if the secret information stored on hard tokens (i.e initial PIN/PUK codes) should
# be displayed for the administrators. If false only non-sensitive information is displayed.
# Values should be "true" or "false".
# Default = true
#hardtoken.diplaysensitiveinfo=true

# Show links to the EJBCA documentation. The links can either point to internally deployed
# documentation on the server or any exteral location like ejbca.org.
# Default = internal
#web.docbaseuri=disabled
web.docbaseuri=internal
#web.docbaseuri=http://www.ejbca.org

# Require administrator certificates to be available in database for revocation
# checks. Set this to false, if you want to be able to use admin certificates
# issued by external CAs.
# Default: true
#web.reqcertindb=true

# Allow users to self-register on public web, by entering their information.
# This creates an approval request for the admin.
# Default = false
web.selfreg.enabled=false

# Certificate types to make available for the user
#web.selfreg.defaultcerttype=1
#web.selfreg.certtypes.1.description=User certificate
#web.selfreg.certtypes.1.eeprofile=SOMEPROFILE
#web.selfreg.certtypes.1.certprofile=ENDUSER

# Optional: Instead of asking the user for a username, EJBCA can generate
# the username from a field in the subject DN
#web.selfreg.certtypes.1.usernamemapping=CN

# Deploy the request browser certificate renewal web application and show a 
# link to it from the EJBCA public web.
# Default = false
web.renewalenabled=true

# Wether it should be possible to manually specify a custom class name in
# the admin web (e.g. for a custom Publisher or Service), or if the choice
# of class should be constrained to auto-detected classes only.
# If you are using classes made for EJBCA 5.0 or earlier you must enable
# this option, or wrap them in a "service" JAR file (see the Admin Guide).
# Default = false
#web.manualclasspathsenabled=true

# Presentation of the an exception on the web error page.
#
# General error message to be presented to the user when an exception occur.
# Default: An exception has occurred
web.errorpage.notification=An exception has occurred.
#
# Print the stacktrace of the exception
# Default: true
web.errorpage.stacktrace=false

# Custom Servlet filter for emulation of client certificate authentication to the Admin GUI
# using a Tomcat Valve or similar proxy.
# Default is false.
#web.enableproxiedauth=true

# Whether the remote IP address should be logged during administrator login.
# This works as expected when using an Apache AJP proxy, but if a reverse proxy
# server is running in front of EJBCA then the address of the proxy will be logged.
# In that case the web.log.adminforwardingip can be used in addition to this.
#
# If you want this information to be included in the webservice transaction log,
# you should add \${ADMIN_FORWARDED_IP} to the "ejbcaws.trx-log-order" property instead.
# 
# Default: true
web.log.adminremoteip=true

# Whether the IP address seen at the proxy (from the HTTP header "X-Forwarded-For")
# should be logged. This information can only be trusted if the request
# is known to come from a trusted proxy server.
#
# If you want this information to be included in the webservice transaction log,
# you should add \${ADMIN_FORWARDED_IP} to the "ejbcaws.trx-log-order" property instead.
#
# Default: false
#web.log.adminforwardedip=true

# Available PKCS#11 CryptoToken libraries and their display names
# If a library file's presence is not detected it will not show up in the Admin GUI.
# Default values (see src/java/defaultvalues.properties for most up to date values):
#cryptotoken.p11.lib.10.name=SafeNet ProtectServer Gold Emulator
#cryptotoken.p11.lib.10.file=/opt/ETcpsdk/lib/linux-x86_64/libctsw.so
#cryptotoken.p11.lib.11.name=SafeNet ProtectServer Gold
#cryptotoken.p11.lib.11.file=/opt/ETcpsdk/lib/linux-x86_64/libcryptoki.so
#cryptotoken.p11.lib.20.name=SafeNet Luna SA
#cryptotoken.p11.lib.20.file=/usr/lunasa/lib/libCryptoki2_64.so
#cryptotoken.p11.lib.21.name=SafeNet Luna PCI
#cryptotoken.p11.lib.21.file=/usr/lunapci/lib/libCryptoki2_64.so
#cryptotoken.p11.lib.22.name=SafeNet Luna PCI
#cryptotoken.p11.lib.22.file=/Program Files/LunaPCI/cryptoki.dll
#cryptotoken.p11.lib.30.name=Utimaco
#cryptotoken.p11.lib.30.file=/opt/utimaco/p11/libcs2_pkcs11.so
#cryptotoken.p11.lib.31.name=Utimaco
#cryptotoken.p11.lib.31.file=/opt/Utimaco/Software/PKCS11/lib/Linux-x86-64/libcs2_pkcs11.so
#cryptotoken.p11.lib.32.name=Utimaco
#cryptotoken.p11.lib.32.file=/etc/utimaco/libcs2_pkcs11.so
#cryptotoken.p11.lib.33.name=Utimaco
#cryptotoken.p11.lib.33.file=C:/Program Files/Utimaco/SafeGuard CryptoServer/Lib/cs2_pkcs11.dll
#cryptotoken.p11.lib.40.name=nCipher
#cryptotoken.p11.lib.40.file=/opt/nfast/toolkits/pkcs11/libcknfast.so
#cryptotoken.p11.lib.50.name=ARX CoSign
#cryptotoken.p11.lib.50.file=C:/windows/system32/sadaptor.dll
#cryptotoken.p11.lib.60.name=SmartCard-HSM
#cryptotoken.p11.lib.60.file=/usr/lib/x86_64-linux-gnu/opensc-pkcs11.so
#cryptotoken.p11.lib.61.name=OpenSC
#cryptotoken.p11.lib.61.file=/usr/lib/i386-linux-gnu/opensc-pkcs11.so
#cryptotoken.p11.lib.62.name=OpenSC
#cryptotoken.p11.lib.62.file=/usr/local/lib/opensc-pkcs11.so
#cryptotoken.p11.lib.63.name=OpenSC
#cryptotoken.p11.lib.63.file=C:/Windows/system32/opensc-pkcs11.dll
#
# You can add your own values with an available number, or override numbers from defaults...
#cryptotoken.p11.lib.255.name=P11 Proxy
#cryptotoken.p11.lib.255.file=/home/user/local/p11proxy/dist/p11proxy.so
#
# If you would like to restrict the accessible slots, you can use the following property:
# (you can use ranges, and if you omit the low or high number it means "no limit")
#cryptotoken.p11.lib.30.slotlist=1-100
#cryptotoken.p11.lib.30.slotlist=0,1,65537
#cryptotoken.p11.lib.30.slotlist=i1-i
# To change the default slot (e.g. if you have disabled access to slot 0)
#cryptotoken.p11.defaultslot=1
#cryptotoken.p11.defaultslot=i1

# Available PKCS#11 CryptoToken attribute files and their display names
# Use if the default PKCS#11 attributes are not good for the PKCS#11 module and if needs specific attributes 
#cryptotoken.p11.attr.0.name=
#cryptotoken.p11.attr.0.file=
#...
#cryptotoken.p11.attr.255.name=
#cryptotoken.p11.attr.255.file=
EOF
}


cat <<EOF
#######        #  ######    #####      #     
#              #  #     #  #     #    # #    
#              #  #     #  #         #   #   
#####          #  ######   #        #     #  
#        #     #  #     #  #        #######  
#        #     #  #     #  #     #  #     #  
#######   #####   ######    #####   #     #  

This installs the EJBCA PKI
EOF

cd ~
if [ $EUID -eq 0 ]; then
  echo "Do not execute this script as root"
  echo "We did nothing yet"
  exit 1
fi


cd ~
if [ -d ejbca-custom ]; then
  echo "ejba-custom already exists"
  echo "we will do nothing here"
  exit 0
fi


PKG_INSTALL=""
if [ -f /etc/redhat-release ]; then
  echo "found RedHat/CentOS"
  PKG_INSTALL="yum install tar unzip java-1.8.0-openjdk-devel ant psmisc mariadb bc patch"
else if [ -f /etc/debian_version ]; then
  echo "found Debian/Ubuntu"
  PKG_INSTALL="apt install unzip openjdk-8-jdk-headless ant ant-optional psmisc mariadb-client bc patch"
  else
    echo "Unknown platform, your milage may vary"
  fi
fi

RUN_AS_ROOT_FILE="/tmp/run_as_root.sh"
cat <<EOF >${RUN_AS_ROOT_FILE}
$PKG_INSTALL
#groupadd ${ejbca_group}
#useradd -md ${ejbca_home} -g ${ejbca_group} -s /bin/bash ${ejbca_user}

cat <<EOF2 > /etc/systemd/system/ejbca.service
[Unit]
Description=EJBCA PKI
After=network.target

[Service]
Type=simple
User=${ejbca_user}
Group=${ejbca_group}
WorkingDirectory=${ejbca_home}
ExecStart=${ejbca_home}/wildfly/bin/standalone.sh -b 0.0.0.0
ExecStop=${ejbca_home}/wildfly/bin/jboss-cli.sh --connect command=:shutdown
Restart=on-failure
RestartSec=300s

[Install]
WantedBy=multi-user.target
EOF2

systemctl daemon-reload

rm -f "${RUN_AS_ROOT_FILE}"
EOF
chmod 755 "${RUN_AS_ROOT_FILE}"

echo "EJBCA will be installed on user ${ejbca_user}"
echo 
echo "please execute /tmp/run_as_root.sh as root"
echo "Please select \"Yes\" if you did so, but not before"
select yn in "Yes" "No"; do
  case $yn in
      Yes ) init_installer; break;;
      No ) exit;;
  esac
done
